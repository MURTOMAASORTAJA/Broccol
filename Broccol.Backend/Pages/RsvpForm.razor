@using Broccol.Backend.Data;
@inject IHttpClientFactory ClientFactory;

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.1/css/all.css" integrity="sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz" crossorigin="anonymous">

<div class="main-block">
      <h1>Registration</h1>
    <form action="/">
        <hr>
        <label id="icon" for="name"><i class="fas fa-user"></i></label>
        <InputText @bind-Value="RsvpEntry.Name" type="text" name="name" id="name" placeholder="Name" required />
        
        <hr>
        <div class="gender">
            <InputRadioGroup Name="msg-method" @bind-Value="RsvpEntry.MessagingMethod">
                <label for="method-email">Email</label>
                <InputRadio Name="msg-method" id="method-email" Value="0"></InputRadio>
                <label for="method-tg">Telegram</label>
                <InputRadio Name="msg-method" id="method-tg"  Value="1"></InputRadio>
            </InputRadioGroup>

           @* <input type="radio" @bind-value="MsgMethod" id="method-email" name="msg-method" checked />
            <label for="method-email" class="radio">Email</label>
            <input type="radio" value="none" id="method-telegram" name="msg-method" />
            <label for="method-email" class="radio">Telegram</label>*@
        </div>
        <hr>
        <label id="icon" for="name"><i class="fas fa-envelope"></i></label>
        <InputText @bind-Value="RsvpEntry.EmailOrTgUserId" type="text" name="name" id="name" placeholder="Email" required />
        <hr>
        <div class="btn-block">
            <p>By clicking Register, you agree on the <a href="https://www.w3docs.com/privacy-policy">Privacy Policy for W3Docs</a>.</p>
            <button disabled @onclick="HandleSubmitClick">@ButtonText</button>
        </div>
    </form>
</div>

<style>
    html, body {
        display: flex;
        justify-content: center;
        height: 100%;
    }

    body, div, h1, form, input, p {
        padding: 0;
        margin: 0;
        outline: none;
        font-family: Roboto, Arial, sans-serif;
        font-size: 16px;
        color: #666;
    }

    h1 {
        padding: 10px 0;
        font-size: 32px;
        font-weight: 300;
        text-align: center;
    }

    p {
        font-size: 12px;
    }

    hr {
        color: #a9a9a9;
        opacity: 0.3;
    }

    .main-block {
        max-width: 340px;
        min-height: 460px;
        padding: 10px 0;
        margin: auto;
        border-radius: 5px;
        border: solid 1px #ccc;
        box-shadow: 1px 2px 5px rgba(0,0,0,.31);
        background: #ebebeb;
    }

    form {
        margin: 0 30px;
    }

    .account-type, .gender {
        margin: 15px 0;
    }

    input[type=radio] {
        display: none;
    }

    label#icon {
        margin: 0;
        border-radius: 5px 0 0 5px;
    }

    label.radio {
        position: relative;
        display: inline-block;
        padding-top: 4px;
        margin-right: 20px;
        text-indent: 30px;
        overflow: visible;
        cursor: pointer;
    }

        label.radio:before {
            content: "";
            position: absolute;
            top: 2px;
            left: 0;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #1c87c9;
        }

        label.radio:after {
            content: "";
            position: absolute;
            width: 9px;
            height: 4px;
            top: 8px;
            left: 4px;
            border: 3px solid #fff;
            border-top: none;
            border-right: none;
            transform: rotate(-45deg);
            opacity: 0;
        }

    input[type=radio]:checked + label:after {
        opacity: 1;
    }

    input[type=text], input[type=password] {
        width: calc(100% - 57px);
        height: 36px;
        margin: 13px 0 0 -5px;
        padding-left: 10px;
        border-radius: 0 5px 5px 0;
        border: solid 1px #cbc9c9;
        box-shadow: 1px 2px 5px rgba(0,0,0,.09);
        background: #fff;
    }

    input[type=password] {
        margin-bottom: 15px;
    }

    #icon {
        display: inline-block;
        padding: 9.3px 15px;
        box-shadow: 1px 2px 5px rgba(0,0,0,.09);
        background: #1c87c9;
        color: #fff;
        text-align: center;
    }

    .btn-block {
        margin-top: 10px;
        text-align: center;
    }

    button {
        width: 100%;
        padding: 10px 0;
        margin: 10px auto;
        border-radius: 5px;
        border: none;
        background: #1c87c9;
        font-size: 14px;
        font-weight: 600;
        color: #fff;
    }

        button:hover {
            background: #26a9e0;
        }
</style>

@code {
    private RsvpEntry RsvpEntry { get; set; } = new RsvpEntry();
    private RsvpRegistrationResult? PreviousResult { get; set; }
    private int MsgMethod { get; set; } = 0;
    private string ButtonText { get; set; } = "Send";
    private readonly string InvalidNameCharacters = "1234567890!\"#¤%&/()[]{}\\/|@£€$<>^";
    private readonly string InvalidEmailCharacters = "#¤%&/()[]{}\\/|<>$€^";

    private string ComplainedName { get; set; } = "";
    private string ComplainedEmail { get; set; } = "";

    private void HandleSubmitClick()
    {
        var nameValidation = NameIsValid();
        if (!nameValidation.Item1)
        {
            
        }
    }

    private (bool, string?) NameIsValid()
    {
        if (string.IsNullOrEmpty(RsvpEntry.Name))
        {
            return (false, "Name can't be empty.");
        }

        if (RsvpEntry.Name.Split(" ").Length < 2)
        {
            return (false, "Name has to contain first name and last name.");
        }

        if (RsvpEntry.Name.Any(c => InvalidNameCharacters.Contains(c)))
        {
            return (false, "Name has invalid characters.");
        }

        return (true, null);
    }

    private (bool, string?) EmailIsValid()
    {
        if (string.IsNullOrEmpty(RsvpEntry.EmailOrTgUserId))
        {
            return (false, "Email can't be empty.");
        }

        if
        (
            !RsvpEntry.EmailOrTgUserId.Contains("@") ||
            RsvpEntry.EmailOrTgUserId.StartsWith("@") ||
            RsvpEntry.EmailOrTgUserId.EndsWith("@") ||
            !RsvpEntry.EmailOrTgUserId.Contains(".") ||
            RsvpEntry.EmailOrTgUserId.StartsWith(".") ||
            RsvpEntry.EmailOrTgUserId.EndsWith(".")
        )
        {
            return (false, "Invalid email.");
        }

        if (RsvpEntry.EmailOrTgUserId.Any(c => InvalidEmailCharacters.Contains(c)))
        {
            return (false, "Email has invalid characters.");
        }

        return (true, null);
    }
}
